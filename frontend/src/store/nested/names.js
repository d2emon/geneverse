/*
RandomGen - main generation code
All this code by Orteil, 2014. Please do not reproduce without permission. Do not claim ownership.
A few things :
	-This is really messy. It's all tangled-up and hardly commented at all. This is mostly because a lot of it was written through trial and error. Sorry.
	-I could probably use regexes, but I'm really bad at those - so we're parsing data the dumb way most of the time.
	-Feel free to browse through and see how it's made, if you can get past the bad code and quirky work-arounds.

TODO :
	-log of last generated text and generators used
	-forum board
	-more stock generators (synonym dictionaries : http://writeworld.tumblr.com/post/64299338442/synonyms-for-words-commonly-used-in-students-writings )
	-switches (close off entire lists depending on a dynamic setting)
	-quick edit
	-negative rand numbers
	-document "hidden", "allow duplicates", "lower", "compress", "first" "middle" "last part"

Quick tutorial :
	-To create a random generator, you simply have to define lists of things that reference each other. For example :
		$animal
		cat
		dog
		fish

		$phrase
		My pet is a [animal].
		I am feeding my [animal].
	-This will generate sentences such as "My pet is a cat", or "I am feeding my fish".
	-The last list declared will be used as the base generator.
	-You can change how many items are generated by adding "&amount=10" to the url; you can also change the base generator by adding "&seed=element".

Bugs :
	-"[I'm cool|you're lame]" can return "You're lame" - fix case
	-check this out :
	$art
	the
	[an]
	$out
	[*DEBUG ON*][An] [apple|cake].
	->[an] doesn't get capitalized (but does with [An,ABC])
	-[|[stuff]] returns stuff always (uniques at work ?)
	-amount not working in includes (add a reset)
	-"the subject was found with 40 purple pocket function watch() { [native code] } embedded inside his torso" WHAT
	-probably tons more oh god
*/

function l(what){return document.getElementById(what);}
function choose(arr) {return arr[Math.floor(Math.random()*arr.length)];}
function chooseWithLimits(arr,limits)
{
	var arr2=[];
	var text=0;
	if (arr.length>0 && arr[0].text) text=1;
//	var str=[];for (var i in arr){str.push(arr[i].text||arr[i]);}
//	console.log('Trying to find a unique element in '+str.join('|')+'. The limits are '+limits.join('|')+'.');
	for (var i in arr)
	{
		if (limits.indexOf((text?arr[i].text:arr[i]))==-1) arr2.push(arr[i]);
	}
	if (arr2.length==0) return arr[Math.floor(Math.random()*arr.length)];
	else return arr2[Math.floor(Math.random()*arr2.length)];
}

function escapeRegExp(str){return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");}
function replaceAll(find,replace,str){return str.replace(new RegExp(escapeRegExp(find),'g'),replace);}

allowedTags=['b','i','u','q','p','small','big','center','h1','h2','h3','br'];
function sanitize(str)//when we only want to allow certain html tags
{
	for (var i in allowedTags)
	{
		str=replaceAll('<'+allowedTags[i]+'>','{{{'+allowedTags[i]+'}}}',str);
		str=replaceAll('</'+allowedTags[i]+'>','{{{/'+allowedTags[i]+'}}}',str);
	}
	str=escapeHtml(str);
	for (var i in allowedTags)
	{
		str=replaceAll('{{{'+allowedTags[i]+'}}}','<'+allowedTags[i]+'>',str);
		str=replaceAll('{{{/'+allowedTags[i]+'}}}','</'+allowedTags[i]+'>',str);
	}
	return str;
}
function tidy(htmldata)//from http://stackoverflow.com/questions/8933428/how-to-close-html-tags-in-javascript , should close all hanging tags
{
	var d=document.createElement('div');
	d.innerHTML=htmldata;
	return d.innerHTML;
}

function beginsWith(me,what){return (me.indexOf(what)==0);}
function Cap(str){return str.charAt(0).toUpperCase()+str.slice(1);}
function Title(what)
{
	//Changes a string like "the cat is on the table" to "the Cat Is on the Table"
	what=what.split(' ');
	var toReturn='';
	for (var i in what)
	{
		if (what[i]!='of' && what[i]!='in' && what[i]!='on' && what[i]!='and' && what[i]!='the' && what[i]!='an' && what[i]!='a' && what[i]!='with' && what[i]!='to' && what[i]!='for') what[i]=what[i].substring(0,1).toUpperCase()+what[i].substring(1);
		toReturn+=' '+what[i];
	}
	return toReturn.substring(1);
}

function ajax(url,callback){
	var ajaxRequest;
	try{ajaxRequest = new XMLHttpRequest();} catch (e){try{ajaxRequest=new ActiveXObject('Msxml2.XMLHTTP');} catch (e) {try{ajaxRequest=new ActiveXObject('Microsoft.XMLHTTP');} catch (e){alert("Something broke!");return false;}}}
	if (callback){ajaxRequest.onreadystatechange=function(){if(ajaxRequest.readyState==4){callback(ajaxRequest.responseText);}}}
	ajaxRequest.open('GET',url+'&nocache='+(new Date().getTime()),true);ajaxRequest.send(null);
}

function AddEvent(html_element, event_name, event_function)
{
	if(html_element.attachEvent)//Internet Explorer
		html_element.attachEvent("on" + event_name, function() {event_function.call(html_element);});
	else if(html_element.addEventListener)//Firefox & company
		html_element.addEventListener(event_name, event_function, false);//don't need the 'call' trick because in FF everything already works in the right way
}

function getUrlVars()
{
	var vars={};
	var loc=window.location.href.replace('#','');//hack to get rid of hash
	var parts=loc.replace(/[?&]+([^=&]+)=([^&]*)/gi,
		function(m,key,value)
		{
			vars[key]=value;
		}
	);
	return vars;
}
function escapeHtml(str)
{
	var div=document.createElement('div');
	div.appendChild(document.createTextNode(str));
	return div.innerHTML;
};

function log(str)
{
	if (Game.debugging) console.log(Array(Game.nesting+1).join('	')+'| '+str);
}

function edit()
{
	l('edit').style.display='block';
}

/*=====================================================================================
LAUNCH THIS THING
=======================================================================================*/

window.onload=function()
{
	if (!Game.ready) Game.Init();
};
